#!/usr/bin/env python3

import json


def valid_hostname(hostname):
    # max length?
    # underscores not allowed
    pass

def valid_location(location):
    # list locations
    pass

def valid_ram_size(ram_size):
    # list ram_sizes
    pass

def valid_os_image(os_image):
    # list os_images
    pass

def valid_pat_path(pat_path):
    try:
        pa_token = open('{pat_path}'.format(pat_path=pat_path), 'r').read()
        return pa_token
    except IOError:
        valid_pat_path(input('IOError: Invalid PAT path.\n \
                                Try again; PAT path: ').lower())

def valid_vm_count(vm_count):
    if isinstance(vm_count, int): 
        if 0 < vm_count < 7: # FIXME Modularize the hard-coded upper-limit.
            return vm_count
        else:
            valid_vm_count(input('ValueError: Invalid VM count.\n \
                                    Try again; VM count: ').lower()) # TODO Raise ValueError
    else:
        valid_vm_count(input('TypeError: Invalid VM count.\n \
                                Try again; VM count: ').lower()) # TODO Raise TypeError

def create():
    endpoint = 'https://api.digitalocean.com/v2/droplets'
    json_obj = {}

    vm_count = valid_vm_count(input('VM count: ').lower())
    hostname = valid_hostname(input('Hostname: ').lower())
    pa_token = valid_pat_path(input('PAT path: ').lower())

    if vm_count < 2:
        json_obj['name'] = hostname
    else:
        # namebase = valid_hostname(input('Namebase: ').lower())
        # vm_names = []
        # for _ in vm_names:
        #     vm_names.append(namebase += str('-{_}'.format(_=_+=1)))
        # json_obj['names'] = vm_names
        json_obj['names'] = [hostname += str('-{_}'.format(_=_+=1)) \
                                            for _ in range(vm_count)]
    json_obj['region'] = valid_location(input('Location: ').lower())
    json_obj['size']   = valid_ram_size(input('RAM size: ').lower())
    json_obj['image']  = valid_os_image(input('OS image: ').lower())

    a_header = 'Authorization: Bearer {pa_token}'.format(pa_token=pa_token)
    c_header = 'Content-Type: application/json'

    curl_req = 'curl -X POST "{endpoint}" \
                -d "{json_obj}" \
                -H "{a_header}" \
                -H "{c_header}"'.format(endpoint=endpoint, \
                                        json_obj=json.load(json_obj), \
                                        a_header=a_header, \
                                        c_header=c_header)

